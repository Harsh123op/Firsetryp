from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import random
import asyncio
from Grabber import application, user_collection  # Assuming Grabber is your module/package

user_bets = {}

async def luck(update: Update, context: CallbackContext):
    # Extract the user ID
    user_id = update.effective_user.id
    
    # Extract the coin amount from the command
    try:
        if len(context.args) == 1:
            amount = int(context.args[0])
        else:
            amount = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Please use the command in the format /luck <coin>")
        return
    
    # Retrieve the user's balance from the database
    user_data = await user_collection.find_one({'id': user_id})
    user_balance = user_data.get('balance') if user_data else None
    
    # Check if the user's balance is retrieved successfully
    if user_balance is None:
        await update.message.reply_text("Failed to retrieve your balance. Please try again later.")
        return
    
    # Check if the user has enough coins to place a bet
    if amount > user_balance:
        await update.message.reply_text("Sorry, you don't have enough coins to place this bet.")
        return
    
    # Store user's bet
    user_bets[user_id] = amount
    
    # Create the keyboard
    keyboard = [
        [
            InlineKeyboardButton("1", callback_data='1'),
            InlineKeyboardButton("2", callback_data='2'),
            InlineKeyboardButton("3", callback_data='3'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("Try your luck!", reply_markup=reply_markup)

# Function to handle button clicks
# Function to handle button clicks
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    chosen_number = int(query.data)
    
    # Retrieve user's bet
    bet_amount = user_bets.get(user_id)
    if bet_amount is None:
        await query.answer("You haven't placed a bet yet.")
        return
    
    # Generate a random number
    correct_number = random.randint(1, 3)
    
    if chosen_number == correct_number:
        # User guessed correctly
        winnings = bet_amount * 2
        await query.answer(f"Congratulations! You guessed correctly and won {winnings} coins.")
        # Update user's balance in the database
        await user_collection.update_one({'id': user_id}, {'$inc': {'balance': winnings}})
    else:
        # User guessed incorrectly
        await query.answer(f"Sorry, you guessed incorrectly. You lost {bet_amount} coins.")
        # Update user's balance in the database
        await user_collection.update_one({'id': user_id}, {'$inc': {'balance': -bet_amount}})
    
    # Clear user's bet
    del user_bets[user_id]

    # Delete the message after a delay
    await asyncio.sleep(1)
    await query.message.delete()





# Define handlers
luck_handler = CommandHandler('luck', luck)
button_handler = CallbackQueryHandler(button)

# Add handlers to the dispatcher
application.add_handler(luck_handler)
application.add_handler(button_handler)
